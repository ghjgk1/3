name: SonarQube Analysis
on:
  push:
    branches: [ master, main ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory -Force
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          
      - name: Restore dependencies
        run: dotnet restore
        
      - name: Begin SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"ghjgk1_3" `
            /o:"ghjgk1" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" `
            /d:sonar.cs.dotcover.reportsPaths="**/coverage.cobertura.xml" `
            /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx" `
            /d:sonar.coverage.exclusions="**/*Test*.cs,**/Tests/**,**/bin/**,**/obj/**" `
            /d:sonar.test.exclusions="**/*Test*.cs,**/Tests/**"
            
      - name: Build solution
        run: dotnet build --configuration Release --no-restore
        
      - name: Run tests with coverage
        continue-on-error: true
        run: |
          dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage" --results-directory TestResults --logger "trx;LogFileName=testresults.trx"
          
      - name: Debug coverage files
        shell: powershell
        run: |
          Write-Host "=== Coverage files in TestResults ==="
          Get-ChildItem -Path TestResults -Recurse -Filter "coverage.*" | ForEach-Object { 
            Write-Host "$($_.FullName) - $($_.Length) bytes" 
            Write-Host "First 10 lines:"
            Get-Content $_.FullName -TotalCount 10 | ForEach-Object { Write-Host "  $_" }
            Write-Host ""
          }
          
          Write-Host "=== Final coverage file ==="
          if (Test-Path "coverage.opencover.xml") {
            Write-Host "coverage.opencover.xml exists - $((Get-Item 'coverage.opencover.xml').Length) bytes"
          } else {
            Write-Host "coverage.opencover.xml NOT FOUND"
          }
          
      - name: Process coverage files
        shell: powershell
        run: |
          # Сначала ищем OpenCover файлы
          $openCoverFiles = Get-ChildItem -Path TestResults -Recurse -Filter "coverage.opencover.xml" -ErrorAction SilentlyContinue
          if ($openCoverFiles.Count -gt 0) {
            Copy-Item $openCoverFiles[0].FullName -Destination "coverage.opencover.xml"
            Write-Host "OpenCover file found and copied"
          } else {
            # Если OpenCover нет, ищем Cobertura и конвертируем
            $coberturaFiles = Get-ChildItem -Path TestResults -Recurse -Filter "coverage.cobertura.xml" -ErrorAction SilentlyContinue
            if ($coberturaFiles.Count -gt 0) {
              Write-Host "Found Cobertura file, installing reportgenerator..."
              dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.2.0
              
              Write-Host "Converting Cobertura to OpenCover..."
              reportgenerator "-reports:$($coberturaFiles[0].FullName)" "-targetdir:./CoverageReport" "-reporttypes:OpenCover"
              
              if (Test-Path "./CoverageReport/Cobertura.xml") {
                Copy-Item "./CoverageReport/Cobertura.xml" -Destination "coverage.opencover.xml"
                Write-Host "Cobertura converted to OpenCover format"
              } else {
                Write-Host "Conversion failed, using original Cobertura file"
                Copy-Item $coberturaFiles[0].FullName -Destination "coverage.opencover.xml"
              }
            } else {
              Write-Host "No coverage files found"
            }
          }
          
          # Показать информацию о файле
          if (Test-Path "coverage.opencover.xml") {
            $size = (Get-Item "coverage.opencover.xml").Length
            Write-Host "Final coverage file size: $size bytes"
          }
          
      - name: End SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
