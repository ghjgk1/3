name: SonarQube Analysis
on:
  push:
    branches:
      - main
      - master
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: read

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  checksecret:
    name: Check if SONAR_TOKEN is set
    runs-on: ubuntu-latest
    outputs:
      is_SONAR_TOKEN_set: ${{ steps.check_secret.outputs.is_SONAR_TOKEN_set }}
    steps:
      - name: Check secret
        id: check_secret
        run: |
          echo "is_SONAR_TOKEN_set=${{ env.SONAR_TOKEN != '' }}" >> $GITHUB_OUTPUT

  sonar_analysis:
    name: Build and Analyze with SonarCloud
    runs-on: ubuntu-latest
    needs: checksecret
    if: needs.checksecret.outputs.is_SONAR_TOKEN_set == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install SonarCloud scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Begin SonarCloud analysis
        run: |
          dotnet sonarscanner begin \
            /k:"ghjgk1_3" \
            /o:"ghjgk1" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io"  \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests (excluding integration tests)
        run: |
          dotnet test \
            --configuration Release \
            --no-build \
            --filter "(TestCategory!=Integration)" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput="../coverage.opencover.xml"

      - name: End SonarCloud analysis
        run: |
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
