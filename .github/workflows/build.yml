name: SonarQube Analysis

on:
  push:
    branches: [ master ]
  pull_request:
    types: [ opened, synchronize, reopened ]

env:
  DOTNET_VERSION: '8.0.x'  # Указываем версию .NET 8.0

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install tools
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global coverlet.console

      - name: Create correct coverlet config
        shell: bash
        run: |
          cat > coverlet.runsettings <<EOF
          <?xml version="1.0" encoding="utf-8"?>
          <RunSettings>
            <DataCollectionRunSettings>
              <DataCollectors>
                <DataCollector friendlyName="XPlat code coverage">
                  <Configuration>
                    <Format>cobertura</Format>
                  </Configuration>
                </DataCollector>
              </DataCollectors>
            </DataCollectionRunSettings>
          </RunSettings>
          EOF

      - name: Restore dependencies
        run: dotnet restore

      - name: Begin SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin `
            /k:"ghjgk1_3" `
            /o:"ghjgk1" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io"    `
            /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.cobertura.xml" `
            /d:sonar.coverage.exclusions="**Test*.cs,**/Migrations/**" `
            /d:sonar.verbose=true

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests with coverage (exclude Integration)
        run: |
          dotnet test `
            --configuration Release `
            --settings coverlet.runsettings `
            --collect:"XPlat Code Coverage" `
            --logger trx `
            --results-directory TestResults `
            --filter "TestCategory!=Integration"

      - name: Verify coverage file
        shell: powershell
        run: |
          $coverageFile = Get-ChildItem -Path TestResults -Recurse -Filter "coverage.cobertura.xml" | Select-Object -First 1
          if ($coverageFile) {
            Write-Host "Coverage file found at: $($coverageFile.FullName)"
            echo "COVERAGE_FILE=$($coverageFile.FullName)" >> $env:GITHUB_ENV
          } else {
            Write-Host "##[error] No coverage file found!"
            exit 1
          }

      - name: End SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
