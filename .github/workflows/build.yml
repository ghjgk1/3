name: SonarQube Analysis
on:
  push:
    branches: [ master, main ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory -Force
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Install dotnet-coverage
        run: dotnet tool install --global dotnet-coverage

      - name: Restore dependencies
        run: dotnet restore

      - name: Begin SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"ghjgk1_3" `
            /o:"ghjgk1" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.vscoveragexml.reportsPaths="**/coverage.xml" `
            /d:sonar.coverage.exclusions="**/*Test*.cs,**/Test*/**,**/Tests/**,**/Migrations/**,**/*Migration*.cs" `
            /d:sonar.exclusions="**/bin/**,**/obj/**"

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests and collect coverage
        shell: powershell
        run: |
          # Найти все тестовые проекты
          Write-Host "Looking for test projects..."
          $testProjects = @()
          Get-ChildItem -Path . -Recurse -Filter "*.csproj" | ForEach-Object {
            $projectPath = $_.FullName
            $projectName = $_.Name
            Write-Host "Checking project: $projectName"
            
            if ($projectName -match "Test" -or $projectName -match "Tests") {
              Write-Host "  -> Found test project by name: $projectName"
              $testProjects += $projectPath
            } else {
              # Проверить содержимое файла проекта
              $content = Get-Content $projectPath -Raw
              if ($content -match "Microsoft\.NET\.Test\.Sdk|xunit|NUnit|MSTest\.TestFramework") {
                Write-Host "  -> Found test project by content: $projectName"
                $testProjects += $projectPath
              }
            }
          }
          
          Write-Host "Found $($testProjects.Count) test projects:"
          $testProjects | ForEach-Object { Write-Host "  $_" }
          
          if ($testProjects.Count -eq 0) {
            Write-Host "No test projects found, creating minimal coverage file"
            $coverageXml = @'
          <?xml version="1.0" encoding="utf-8"?>
          <Coverage>
            <CoverageSummary numSequencePoints="0" visitedSequencePoints="0" numBranchPoints="0" visitedBranchPoints="0" sequenceCoverage="0" branchCoverage="0" maxCyclomaticComplexity="0" minCyclomaticComplexity="0" visitedClasses="0" numClasses="0" visitedMethods="0" numMethods="0" />
          </Coverage>
          '@
            $coverageXml | Out-File -FilePath "coverage.xml" -Encoding UTF8
          } else {
            Write-Host "Running tests with coverage collection..."
            
            # Метод 1: Попробовать dotnet-coverage
            $coverageSuccess = $false
            try {
              Write-Host "Trying dotnet-coverage method..."
              $testCommand = "dotnet test --configuration Release --no-build --logger console --verbosity normal"
              
              & dotnet-coverage collect $testCommand --output coverage.xml --output-format xml
              
              if (Test-Path "coverage.xml" -and (Get-Item "coverage.xml").Length -gt 200) {
                Write-Host "✅ dotnet-coverage succeeded"
                $coverageSuccess = $true
              }
            } catch {
              Write-Host "❌ dotnet-coverage failed: $($_.Exception.Message)"
            }
            
            # Метод 2: Если первый не сработал, использовать встроенное покрытие
            if (-not $coverageSuccess) {
              Write-Host "Trying built-in coverage collection..."
              try {
                dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage" --results-directory ./TestResults/ --logger console --verbosity normal
                
                # Найти файлы покрытия
                $coverageFiles = Get-ChildItem -Path ./TestResults -Recurse -Filter "coverage.cobertura.xml" -ErrorAction SilentlyContinue
                if ($coverageFiles.Count -gt 0) {
                  Write-Host "Found $($coverageFiles.Count) coverage files"
                  
                  # Установить ReportGenerator если его нет
                  try {
                    & reportgenerator --help *>$null
                  } catch {
                    Write-Host "Installing ReportGenerator..."
                    dotnet tool install --global dotnet-reportgenerator-globaltool
                  }
                  
                  # Конвертировать в формат SonarQube
                  Write-Host "Converting coverage to SonarQube format..."
                  & reportgenerator "-reports:./TestResults/**/coverage.cobertura.xml" "-targetdir:./CoverageReport" "-reporttypes:SonarQube"
                  
                  if (Test-Path "./CoverageReport/SonarQube.xml") {
                    Copy-Item "./CoverageReport/SonarQube.xml" -Destination "coverage.xml"
                    Write-Host "✅ Coverage conversion succeeded"
                    $coverageSuccess = $true
                  }
                } else {
                  Write-Host "No coverage.cobertura.xml files found"
                }
              } catch {
                Write-Host "❌ Built-in coverage failed: $($_.Exception.Message)"
              }
            }
            
            # Если ничего не сработало, создать минимальный файл
            if (-not $coverageSuccess) {
              Write-Host "Creating fallback coverage file..."
              $coverageXml = @'
          <?xml version="1.0" encoding="utf-8"?>
          <Coverage>
            <CoverageSummary numSequencePoints="1" visitedSequencePoints="0" numBranchPoints="0" visitedBranchPoints="0" sequenceCoverage="0" branchCoverage="0" maxCyclomaticComplexity="1" minCyclomaticComplexity="1" visitedClasses="0" numClasses="1" visitedMethods="0" numMethods="1" />
          </Coverage>
          '@
              $coverageXml | Out-File -FilePath "coverage.xml" -Encoding UTF8
            }
          }
          
          # Проверить финальный результат
          if (Test-Path "coverage.xml") {
            $size = (Get-Item "coverage.xml").Length
            Write-Host "✅ Coverage file created, size: $size bytes"
            
            Write-Host "Coverage file content preview:"
            Get-Content "coverage.xml" | Select-Object -First 5 | ForEach-Object { Write-Host $_ }
          } else {
            Write-Host "❌ Failed to create coverage file"
            exit 1
          }

      - name: Create coverlet settings (if needed)
        shell: powershell
        run: |
          @"
          <?xml version="1.0" encoding="utf-8" ?>
          <RunSettings>
            <DataCollectionRunSettings>
              <DataCollectors>
                <DataCollector friendlyName="XPlat code coverage">
                  <Configuration>
                    <Format>opencover,cobertura</Format>
                    <Exclude>[*Test*]*,[*.Tests]*,[*]*Migrations*</Exclude>
                    <ExcludeByAttribute>Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute</ExcludeByAttribute>
                  </Configuration>
                </DataCollector>
              </DataCollectors>
            </DataCollectionRunSettings>
          </RunSettings>
          "@ | Out-File -FilePath "coverlet.runsettings" -Encoding UTF8

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage.xml
            TestResults/
            CoverageReport/

      - name: End SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
