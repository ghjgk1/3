name: SonarQube Analysis

on:
  push:
    branches: [ master ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install tools
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-coverage

      - name: Restore dependencies
        run: dotnet restore

      - name: Clean build (optional)
        run: dotnet clean

      - name: Begin SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin `
            /k:"ghjgk1_3" `
            /o:"ghjgk1" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml" `
            /d:sonar.coverage.exclusions="**Test*.cs,**/Migrations/**"

      - name: Build solution (with instrumentation)
        run: dotnet build --configuration Release --no-incremental --no-restore

      - name: Run tests with coverage (debug mode)
        run: |
          # Debug: List all test projects
          echo "=== Test projects ==="
          dotnet list **/*.csproj | grep "Test"

          # Run tests with detailed logging
          dotnet-coverage collect "dotnet test --configuration Release --no-build --logger:console --verbosity:detailed --filter 'TestCategory!=Integration'" -f xml -o "coverage.xml"

          # Debug: Print coverage.xml (first 100 lines)
          echo "=== coverage.xml (head) ==="
          cat coverage.xml | head -n 100

      - name: Verify coverage file
        shell: powershell
        run: |
          # Check if coverage.xml exists and contains valid data
          if (-not (Test-Path "coverage.xml")) {
            Write-Host "##[error] ❌ coverage.xml not found!"
            exit 1
          }

          $coverageContent = Get-Content "coverage.xml" -Raw
          if ($coverageContent -notmatch "<Coverage") {
            Write-Host "##[error] ❌ coverage.xml is empty or invalid!"
            exit 1
          }

          Write-Host "✅ coverage.xml is valid"

      - name: End SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
