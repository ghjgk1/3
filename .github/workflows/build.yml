name: SonarQube Analysis
on:
  push:
    branches: [ master, main ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory -Force
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          
      - name: Restore dependencies
        run: dotnet restore
        
      - name: Begin SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"ghjgk1_3" `
            /o:"ghjgk1" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" `
            /d:sonar.cs.cobertura.reportsPaths="**/coverage.cobertura.xml" `
            /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx" `
            /d:sonar.coverage.exclusions="**/*Test*.cs,**/Tests/**,**/bin/**,**/obj/**" `
            /d:sonar.test.exclusions="**/*Test*.cs,**/Tests/**" `
            /d:sonar.cpd.exclusions="**/*Test*.cs,**/Tests/**"
            
      - name: Build solution
        run: dotnet build --configuration Release --no-restore
        
      - name: Run unit tests with coverage (excluding integration tests)
        continue-on-error: true
        shell: powershell
        run: |
          # Используем Coverlet для генерации отчетов в OpenCover формате
          dotnet test --configuration Release --no-build `
            --logger "trx;LogFileName=testresults.trx" `
            --filter "Category!=Integration" `
            /p:CollectCoverage=true `
            /p:CoverletOutputFormat=cobertura `
            /p:CoverletOutput="TestResults\coverage.cobertura.xml" `
            /p:Exclude="[xunit.*]*%2c[*Tests]*"
            
          # Альтернативный вариант с использованием встроенного сборщика покрытия
          # dotnet test --configuration Release --no-build `
          #   --collect:"XPlat Code Coverage" `
          #   --results-directory TestResults `
          #   --logger "trx;LogFileName=testresults.trx" `
          #   --filter "Category!=Integration"
            
      - name: Process coverage files
        shell: powershell
        run: |
          # Проверяем наличие файла покрытия
          $coverageFile = Get-ChildItem -Path TestResults -Recurse -Filter "coverage.cobertura.xml" | Select-Object -First 1
          
          if ($null -ne $coverageFile) {
              Write-Host "Found coverage file at $($coverageFile.FullName)"
              Copy-Item $coverageFile.FullName -Destination "coverage.cobertura.xml"
              
              # Конвертируем в OpenCover если нужно (требуется лицензия ReportGenerator)
              # dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.2.0
              # reportgenerator "-reports:coverage.cobertura.xml" "-targetdir:./CoverageReport" "-reporttypes:OpenCover"
              # if (Test-Path "./CoverageReport/coverage.xml") {
              #     Copy-Item "./CoverageReport/coverage.xml" -Destination "coverage.opencover.xml"
              # }
          } else {
              Write-Host "No coverage file found"
              # Создаем пустой файл чтобы не сломать анализ SonarQube
              New-Item -Path "coverage.cobertura.xml" -ItemType File -Force
          }
          
      - name: End SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
